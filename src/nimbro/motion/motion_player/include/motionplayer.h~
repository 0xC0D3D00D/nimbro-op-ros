//Motion Module to play motions from Trajectories
//Author: Sebastian Sch√ºller <schuell1@cs.uni-bonn.de>

#ifndef MOTION_PLAYER_H
#define MOTION_PLAYER_H


#include <robotcontrol/model/robotmodel.h>
#include <robotcontrol/motionmodule.h>

#include "boost/filesystem/operations.hpp"
#include "boost/filesystem/path.hpp"
#include "boost/progress.hpp"
#include "boost/regex.hpp"

#include <sensor_msgs/Joy.h>

#include <motion_player/PlayMotion.h>
#include "motion_file/motionfile.h"


namespace motionplayer
{

class MappedMotion: public motionfile::Motion
{
public:
	std::vector<int> motionToModel;
};


class MotionPlayer : public robotcontrol::MotionModule
{
public:
	MotionPlayer();
	virtual ~MotionPlayer();

	virtual bool init(robotcontrol::RobotModel* model);
	virtual void step();
	virtual bool isTriggered();



private:

	std::map<std::string, MappedMotion> m_motionNames;

	robotcontrol::RobotModel* m_model;

	ros::ServiceServer m_srv_play;
	ros::Subscriber m_sub_joy;

	void handleJoy();
	bool handlePlay(motion_player::PlayMotionRequest& req, motion_player::PlayMotionResponse& res);

	void play(std::string motion);
	bool isPlaying;

	bool loadMotionFiles(const boost::filesystem3::path& dir);
	void mapJoints();
	int findIndex(std::string name);

	robotcontrol::RobotModel::State m_state_relaxed;
	robotcontrol::RobotModel::State m_state_init;
	robotcontrol::RobotModel::State m_state_sittingDown;
	robotcontrol::RobotModel::State m_state_sitting;
	robotcontrol::RobotModel::State m_state_standUp;
	robotcontrol::RobotModel::State m_state_standing;
	robotcontrol::RobotModel::State m_state_prone;
	robotcontrol::RobotModel::State m_state_supine;
	robotcontrol::RobotModel::State m_state_kicking;



};





}

#endif